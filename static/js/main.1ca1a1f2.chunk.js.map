{"version":3,"sources":["services/localStorage/tokenService.ts","services/todoStorage/client.ts","services/todoStorage/constants.ts","services/todoStorage/markupHelper.ts","services/todoStorage/DailyTodo/dailyTodoDataHelper.ts","services/todoStorage/DailyTodo/dailyTodoDataService.ts","services/todoStorage/DayTodo/dayTodoDataHelper.ts","services/todoStorage/DayTodo/dayTodoDataService.ts","services/todo.ts","services/type.ts","components/Loading/index.tsx","containers/DailyTodoDetail/DailyTodoDetailPage.tsx","containers/DailyTodo/index.tsx","containers/OneTimeTodo/index.tsx","containers/DayTodo/index.tsx","containers/TokenInput/index.tsx","containers/TodoList/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["checkConnection","a","loadHost","loadToken","globalThis","localStorage","token","saveToken","host","saveHost","JoplinInvalidConnectionError","type","message","e","Error","loadJoplinToken","loadJoplinHost","createNote","title","body","parent_id","is_todo","data","axios","post","ret","console","log","updateNote","id","put","getNote","noteId","fields","params","get","combineFilter","f1","f2","item","generateFilter","criteria","allFilter","_","filter","is_completed","todo_completed","getNotes","page","items","limit","result","concat","has_more","findNote","sorting","rowNote","find","DAY_TODO_FOLDER_ID","REGEX_MARKDOWN_LINK","makeNoteLink","makeTodo","completed","extractJoplinNoteIdFromLink","joplinLinkText","matched","exec","contentIsTemplate","includes","parseTaskLine","line","parseLink","linkMarkdownText","markdownLink","link","parseMarkdownLink","parseDailyTodoBody","parseDailyMultipleTasksDayTask","tasks","parseDailySingleTasks","split","trim","map","task","dayTodoLink","fragments","str","rawTemplateBody","template","startsWith","isTitleLine","dayTasks","splitedBody","rawDayTaskBody","rawTitle","lines","parseDailyMultipleTaskDayTaskNoteLink","getAllDailyTodos","rawDailyTodos","serializeDayTodoFragment","todos","length","push","join","makeContentFromTitleAndBody","todo","serializeDayTodoBody","dailyTodos","totalPoint","serializeDayTodoFooter","extractTotalPointFromMetaFragment","metaFragment","execResult","Number","parseDayTodoBody","dayTodoBody","todoFragment","replace","todoLine","taskTitle","etc","parseDayTodoTodoFragment","frag","dailyTodoFragment","previousTodo","dailyTodoLines","forEach","parseDayTodoDailTodoFragment","saveDayTodo","dayTodo","createDayTodo","addedNote","findDayTodoId","dayTodoTitle","note","order_by","order_dir","getDayTodo","countOfDayPoint","reduce","previousPoint","dailyTodoInDayTodo","updateDayTodo","newPoint","makeDayTodoObj","dailyTodo","todoDay","dayTodoId","getDayTodoDataService","getSupportDays","migratedDay","DateTime","local","days","itemDay","diff","toISODate","minus","setCompleteOfOneTimeTodo","setDailyTodoTaskCompleted","dailyTodoId","thisDailyTodo","setDailyTodoSubTaskCompleted","Loading","children","loading","Checkbox","checked","disabled","onChange","SubTask","onChangeCompleted","style","listStyleType","fontSize","target","DailyTodoDetailPage","queryClient","useQueryClient","mutate","useMutation","onSuccess","invalidateQueries","mutationForAllComplete","useAllComplete","margin","paddingLeft","subTask","handleChangeSubtaskCompleted","DailyTodo","OneTimeTodo","mutation","handleChange","isLoading","DayTodoComponent","useQuery","onClick","TokenInput","hostRef","useRef","tokenRef","useEffect","current","value","handleClick","alert","ref","TodoList","connection","supportDays","useState","setTodoDay","showTokenInput","QueryClient","App","QueryClientProvider","client","className","initialIsOpen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ca1a1f2.chunk.js","sourcesContent":["export const checkConnection = async (): Promise<boolean> => {\n  return !!(await loadHost()) && !!(await loadToken());\n};\n\nexport const loadToken = async (): Promise<string | undefined> => {\n  return globalThis.localStorage.token;\n};\n\nexport const saveToken = async (token: string) => {\n  globalThis.localStorage.token = token;\n};\n\nexport const loadHost = async (): Promise<string | undefined> => {\n  return globalThis.localStorage.host;\n};\n\nexport const saveHost = async (host: string) => {\n  globalThis.localStorage.host = host;\n};\n","import axios from \"axios\";\nimport { loadHost, loadToken } from \"../localStorage/tokenService\";\n\ntype RawNote = {\n  id: string;\n  parent_id: string;\n  title: string;\n  body: string;\n  is_todo: number;\n  todo_completed: number;\n};\n\ntype RawNoteListItem = Omit<RawNote, \"body\">;\n\ntype JoplinItemListResult<T> = {\n  items: T[];\n  has_more: boolean;\n};\n\nexport class JoplinInvalidConnectionError extends Error {\n  static isThis(e: any): e is JoplinInvalidConnectionError {\n    return (\n      e instanceof JoplinInvalidConnectionError &&\n      e.type === \"joplinTokenInvalid\"\n    );\n  }\n  public readonly type = \"joplinTokenInvalid\";\n  constructor() {\n    super(\"joplin token invalid\");\n    this.message = \"joplin token invalid\";\n  }\n}\n\nconst loadJoplinToken = async () => {\n  const token = await loadToken();\n  if (!token) {\n    throw new JoplinInvalidConnectionError();\n  }\n  return token;\n};\n\nconst loadJoplinHost = async () => {\n  const host = await loadHost();\n  if (!host) {\n    throw new JoplinInvalidConnectionError();\n  }\n  return host;\n};\n\nexport async function createNote({\n  title,\n  body,\n  parent_id,\n  is_todo,\n}: Partial<RawNote>): Promise<RawNote> {\n  const data = { title, body, parent_id, is_todo };\n  const ret = await axios.post(\n    `${await loadJoplinHost()}/notes?token=${await loadJoplinToken()}`,\n    data\n  );\n  console.log(\"createNote result: \", ret.data);\n  return ret.data;\n}\n\nexport async function updateNote(\n  id: string,\n  { title, body }: Partial<RawNote>\n) {\n  const data = { body, title };\n  const ret = await axios.put(\n    `${await loadJoplinHost()}/notes/${id}?token=${await loadJoplinToken()}`,\n    data\n  );\n\n  console.log(\"updateNote result: \", ret.data);\n}\n\nexport async function getNote(noteId: string): Promise<RawNote> {\n  const ret = await axios.get(`${await loadJoplinHost()}/notes/${noteId}`, {\n    params: {\n      token: await loadJoplinToken(),\n      fields: \"id,parent_id,title,body,is_todo,todo_completed\",\n    },\n  });\n\n  return ret.data;\n}\n\ntype Criteria = Partial<{\n  parent_id: string;\n  is_todo: boolean;\n  is_completed: boolean;\n}>;\n\nconst combineFilter = <T>(\n  f1: (item: T) => boolean,\n  f2: (item: T) => boolean\n) => {\n  return (item: T) => f1(item) && f2(item);\n};\n\nconst generateFilter = (criteria: Criteria = {}) => {\n  const allFilter = (_: RawNoteListItem) => true;\n  let filter = allFilter;\n\n  if (\"parent_id\" in criteria) {\n    filter = combineFilter(\n      filter,\n      (item) => item.parent_id === criteria.parent_id\n    );\n  }\n\n  if (\"is_todo\" in criteria) {\n    if (criteria.is_todo) {\n      filter = combineFilter(filter, (item) => item.is_todo === 1);\n    } else {\n      filter = combineFilter(filter, (item) => item.is_todo !== 1);\n    }\n  }\n\n  if (\"is_completed\" in criteria) {\n    if (criteria.is_completed) {\n      filter = combineFilter(filter, (item) => item.todo_completed !== 0);\n    } else {\n      filter = combineFilter(filter, (item) => item.todo_completed === 0);\n    }\n  }\n\n  return filter;\n};\n\nexport async function getNotes(criteria: Criteria = {}): Promise<RawNote[]> {\n  let page = 0;\n\n  let items: RawNote[] = [];\n  let result: JoplinItemListResult<RawNote>;\n\n  const filter = generateFilter(criteria);\n\n  do {\n    result = (\n      await axios.get(`${await loadJoplinHost()}/notes`, {\n        params: {\n          token: await loadJoplinToken(),\n          fields: \"id,parent_id,title,is_todo,todo_completed,body\",\n          limit: 100,\n          page: page++,\n        },\n      })\n    ).data;\n\n    items = items.concat(result.items.filter(filter));\n  } while (result.has_more);\n\n  return items;\n}\n\nexport async function findNote(\n  filter: (note: RawNote) => boolean,\n  sorting: {\n    order_by?: keyof RawNote;\n    order_dir?: \"ASC\" | \"DESC\";\n  } = {}\n): Promise<RawNote | undefined> {\n  let page = 0;\n\n  let result: JoplinItemListResult<RawNote>;\n\n  do {\n    result = (\n      await axios.get(`${await loadJoplinHost()}/notes`, {\n        params: {\n          token: await loadJoplinToken(),\n          fields: \"id,parent_id,title,is_todo,todo_completed,body\",\n          limit: 100,\n          page: page++,\n          ...sorting,\n        },\n      })\n    ).data;\n\n    const rowNote = result.items.find(filter);\n    if (rowNote) {\n      return rowNote;\n    }\n  } while (result.has_more);\n}\n","/**\n * 특정 날의 할일 문서 폴더 ID\n */\nexport const DAY_TODO_FOLDER_ID = \"9d9446bc2a4c4c7d9e96bd6bbc5a5a4b\";\n\n/**\n * 각 날짜의 day todo 의 점수를 관리하는 노트 ID\n */\nexport const DAY_POINT_NOTE_ID = \"054c87fff0984d028390125538aa7089\";\n\n/**\n * 매일 할일 정의가 저장된 폴더 ID\n */\nexport const DAILY_TODO_STORE_FOLDER_ID = \"83981f6a4f6d4a0abcffc5363bf3cc8f\";\n\n/**\n * 진행중인 할일 (ex 프로젝트) 이 있는 폴더 ID\n */\nexport const ONE_TIME_TODO_FOLDER_ID = \"09626444fe23477e9704200cf69aff5e\";\n","import { NoteLink, Task } from \"../type\";\n\n/**\n * 마크다운 링크 정규식\n */\nexport const REGEX_MARKDOWN_LINK = /\\[([^\\]]+)\\]\\(([^)]+)\\)/;\n\n/**\n * joplin note link 마크다운 텍스트를 생성한다.\n * @param param0\n */\nexport const makeNoteLink = ({ title, id }: NoteLink): string => {\n  return `[${title}](:/${id})`;\n};\n\nexport const makeTodo = ({\n  title,\n  completed,\n}: {\n  title: string;\n  completed: boolean;\n}) => `- [${completed ? \"x\" : \" \"}] ${title}`;\n\nexport const makeContentFromTitleAndBody = ({\n  title,\n  body,\n}: {\n  title: string;\n  body: string;\n}): string => {\n  const result = [];\n  result.push(`## ${title}`);\n  result.push(body);\n  result.push(\"\");\n  return result.join(\"\\n\");\n};\n\n/**\n * \":/5f95a7805b8145feb85b0b2df1218b80\" => \"5f95a7805b8145feb85b0b2df1218b80\"\n * @param joplinLinkText\n */\nexport const extractJoplinNoteIdFromLink = (joplinLinkText: string) => {\n  const matched = /:\\/([\\d\\w]+)/.exec(joplinLinkText);\n  if (!matched) {\n    throw new Error(\"joplin link (:/xxxx..) required, but: \" + joplinLinkText);\n  }\n\n  return matched[1];\n};\n\n/**\n * 특정 문자열이 daily todo 의 raw 템플릿 인지 여부\n *\n * @param body\n */\nexport const contentIsTemplate = (body: string): boolean => {\n  return body.includes(\"#### 템플릿\");\n};\n\n/**\n * 특정 문서 body 가 multitask 인지 여부\n * @param todo\n */\nexport const checkTodoIsMultiTask = (todoBody: string): boolean => {\n  return contentIsTemplate(todoBody);\n};\n\n/**\n * parse task line\n *\n * from: `- [ ] 할일`\n * to: {completed: false, title: '할일' }\n *\n * @param line\n */\nexport const parseTaskLine = (line: string): Task => {\n  const result = /- \\[([x ])\\] (.+)/.exec(line);\n  if (!result) {\n    throw new Error(`\"${line}\" is not valid TaskLine`);\n  }\n\n  return {\n    completed: result[1] === \"x\",\n    title: result[2],\n  };\n};\n\n/**\n * ex)\n * from : [inbox 정리 2개](:/248aa9b7c29441c8a775561ad3a97a2d)\n * to: { title:'inbox 정리 2개, link: ':/248aa9b7c29441c8a775561ad3a97a2d' }\n * @param linkMarkdownText\n */\nexport const parseMarkdownLink = (\n  linkMarkdownText: string\n): { link: string; title: string } => {\n  const ret = REGEX_MARKDOWN_LINK.exec(linkMarkdownText);\n  if (!ret) {\n    throw new Error(`\"${linkMarkdownText}\" is not valid markdown link`);\n  }\n  return {\n    link: ret[2],\n    title: ret[1],\n  };\n};\n\n/**\n *\n * ex)\n * from : [inbox 정리 2개](:/248aa9b7c29441c8a775561ad3a97a2d)\n * to: { title:'inbox 정리 2개, link: '248aa9b7c29441c8a775561ad3a97a2d' }\n *\n * @param linkMarkdownText\n */\nexport const parseLink = (linkMarkdownText: string): NoteLink => {\n  const markdownLink = parseMarkdownLink(linkMarkdownText);\n  return {\n    id: extractJoplinNoteIdFromLink(markdownLink.link),\n    title: markdownLink.title,\n  };\n};\n\n/**\n * 특정 라인이 title 라인인지 여부\n *\n * @param line\n */\nexport const isTitleLine = (line: string) => line.startsWith(\"#### \");\n","import { DailySingleTask, DayTask, NoteLink, Task } from \"../../type\";\nimport {\n  checkTodoIsMultiTask,\n  contentIsTemplate,\n  isTitleLine,\n  parseLink,\n  parseTaskLine,\n} from \"../markupHelper\";\n\nexport const parseDailyTodoBody = (\n  body: string\n): { dayTasks: DayTask[]; template: Task[] } | { tasks: DailySingleTask[] } => {\n  const isMultiTask = checkTodoIsMultiTask(body);\n  if (isMultiTask) {\n    return {\n      ...parseDailyMultipleTasksDayTask(body),\n    };\n  } else {\n    return {\n      tasks: parseDailySingleTasks(body),\n    };\n  }\n};\n\nexport const parseDailySingleTasks = (body: string): DailySingleTask[] => {\n  const [taskBody] = body.split(\"---\");\n\n  return taskBody\n    .trim()\n    .split(\"\\n\")\n    .map((line) => {\n      const task = parseTaskLine(line);\n      const dayTodoLink = parseLink(task.title);\n\n      return {\n        id: dayTodoLink.id,\n        title: dayTodoLink.title,\n        completed: task.completed,\n      };\n    });\n};\n\nexport const parseDailyMultipleTasksDayTask = (\n  body: string\n): { dayTasks: DayTask[]; template: Task[] } => {\n  const fragments = body\n    .split(\"---\")\n    .map((str) => str.trim())\n    .filter((body) => body);\n\n  const rawTemplateBody = fragments.find(contentIsTemplate);\n\n  const template: Task[] =\n    rawTemplateBody\n      ?.trim()\n      .split(\"\\n\")\n      .filter((str) => str.trim())\n      .filter((line) => !isTitleLine(line))\n      .map(parseTaskLine) || [];\n\n  return {\n    dayTasks: fragments\n      .filter((splitedBody) => !contentIsTemplate(splitedBody))\n      .map((rawDayTaskBody) => {\n        const [rawTitle, ...lines] = rawDayTaskBody.trim().split(\"\\n\");\n\n        return {\n          ...parseDailyMultipleTaskDayTaskNoteLink(rawTitle),\n          tasks: lines\n            .filter((str) => str.trim())\n            .map((line) => parseTaskLine(line)),\n        };\n      }),\n    template,\n  };\n};\n\n/**\n * daily multiple task todo 의 개별 dayTask 에서 제목과 링크를 추출.\n *\n * #### 제목                    -> title : '제목', link : undefined\n * #### [제목](:/link)            -> title : '제목', link : 'link'\n * #### [제목](:/link)\\n- [ ] ... -> title : '제목', link : 'link'\n *\n * @param rawTitle\n */\nexport const parseDailyMultipleTaskDayTaskNoteLink = (\n  rawTitle: string\n): NoteLink => {\n  // https://regexr.com/5ks3n\n  const ret = /#### ([^\\n]+)/.exec(rawTitle);\n  if (ret) {\n    try {\n      return parseLink(ret[1]);\n    } catch (e) {\n      throw new Error(rawTitle + \" is not valid joplin link\");\n    }\n  } else {\n    throw new Error(rawTitle + \" is not raw title text\");\n  }\n};\n","import { DailyTodo } from \"../../type\";\nimport { getNotes } from \"../client\";\nimport { DAILY_TODO_STORE_FOLDER_ID } from \"../constants\";\nimport { parseDailyTodoBody } from \"./dailyTodoDataHelper\";\n\nexport const getAllDailyTodos = async (): Promise<DailyTodo[]> => {\n  const rawDailyTodos = await getNotes({\n    parent_id: DAILY_TODO_STORE_FOLDER_ID,\n    is_completed: false,\n    is_todo: true,\n  });\n\n  return rawDailyTodos.map(({ id, title, todo_completed, body }) => ({\n    id,\n    title,\n    completed: todo_completed > 0,\n    ...parseDailyTodoBody(body),\n  }));\n};\n","import { DayTodo, Todo } from \"../../type\";\nimport { DAY_POINT_NOTE_ID } from \"../constants\";\nimport {\n  makeContentFromTitleAndBody,\n  makeNoteLink,\n  makeTodo,\n  parseLink,\n  parseTaskLine,\n} from \"../markupHelper\";\n\nconst serializeDayTodoFragment = (\n  title: DayTodo[\"title\"],\n  todos: DayTodo[\"todos\"] | DayTodo[\"dailyTodos\"]\n): string => {\n  if (todos.length === 0) {\n    return \"\";\n  }\n\n  const body = todos\n    .map((todo) => {\n      const firstLine = makeTodo({\n        title: makeNoteLink(todo),\n        completed: todo.completed,\n      });\n\n      return [\n        firstLine,\n        ...todo.tasks.map((task) => {\n          return \"\\t\" + makeTodo(task);\n        }),\n      ].join(\"\\n\");\n    })\n    .join(\"\\n\");\n\n  return makeContentFromTitleAndBody({\n    title,\n    body: body,\n  }).trim();\n};\n\nconst serializeDayTodoFooter = (totalPoint?: number): string => {\n  const base = `- ${makeNoteLink({\n    title: \"할일 점수\",\n    id: DAY_POINT_NOTE_ID,\n  })} : `;\n\n  return base + (totalPoint ? totalPoint : \"\");\n};\n\nexport const serializeDayTodoBody = ({\n  todos,\n  dailyTodos,\n  totalPoint,\n}: Pick<DayTodo, \"todos\" | \"dailyTodos\" | \"totalPoint\">): string => {\n  const todoFragment = serializeDayTodoFragment(\"Todo\", todos);\n  const dailyTodoFragment = serializeDayTodoFragment(\"Daily\", dailyTodos);\n  const footer = serializeDayTodoFooter(totalPoint);\n\n  return (\n    [todoFragment, dailyTodoFragment + \"\\n\", footer]\n      .filter((item) => item.trim())\n      .join(\"\\n\\n---\\n\") + \"\\n\"\n  );\n};\n\nexport const parseDayTodoTodoFragment = (todoFragment?: string): Todo[] => {\n  if (!todoFragment) {\n    return [];\n  }\n  return todoFragment\n    .replace(\"## Todo\", \"\")\n    .trim()\n    .split(\"\\n\")\n    .map((todoLine) => {\n      const { completed, title: taskTitle } = parseTaskLine(todoLine.trim());\n      const { id, title } = parseLink(taskTitle);\n\n      return {\n        title,\n        completed,\n        id,\n        etc: \"\",\n        tasks: [],\n      };\n    });\n};\n\nexport const parseDayTodoDailTodoFragment = (\n  dailyTodoFragment?: string\n): Todo[] => {\n  if (!dailyTodoFragment) {\n    return [];\n  }\n\n  const dailyTodoLines = dailyTodoFragment\n    .replace(\"## Daily\", \"\")\n    .trim()\n    .split(\"\\n\");\n\n  const ret: Todo[] = [];\n  let previousTodo: Todo;\n\n  dailyTodoLines.forEach((line) => {\n    if (line.startsWith(\"\\t\")) {\n      // subtask\n      if (previousTodo) {\n        previousTodo.tasks.push(parseTaskLine(line.trim()));\n      }\n    } else {\n      const { completed, title: taskTitle } = parseTaskLine(line.trim());\n      const { id, title } = parseLink(taskTitle);\n\n      previousTodo = {\n        title,\n        completed,\n        id,\n        etc: \"\",\n        tasks: [],\n      };\n      ret.push(previousTodo);\n    }\n  });\n  return ret;\n};\n\nexport const extractTotalPointFromMetaFragment = (\n  metaFragment: string\n): number | undefined => {\n  // https://regexr.com/5l2bv\n  const execResult = /^- \\[.+\\]\\(.+\\) : (\\d+)$/.exec(metaFragment.trim());\n  if (execResult && execResult[1]) {\n    const ret = Number(execResult[1]);\n    if (ret) {\n      return ret;\n    }\n  }\n\n  return undefined;\n};\n\nexport const parseDayTodoBody = (\n  dayTodoBody: string\n): { todos: Todo[]; dailyTodos: Todo[]; totalPoint?: number } => {\n  const splitedBody = dayTodoBody.split(\"---\");\n  let todoFragment = splitedBody.find((frag) => frag.includes(\"## Todo\"));\n\n  let todos: Todo[] = parseDayTodoTodoFragment(todoFragment);\n\n  let dailyTodoFragment = splitedBody.find((frag) => frag.includes(\"## Daily\"));\n  let dailyTodos: Todo[] = parseDayTodoDailTodoFragment(dailyTodoFragment);\n\n  const metaFragment = splitedBody[splitedBody.length - 1];\n\n  return {\n    todos,\n    dailyTodos,\n    totalPoint: extractTotalPointFromMetaFragment(metaFragment),\n  };\n};\n","import { DayTodo, NoteId } from \"../../type\";\nimport { createNote, findNote, getNote, updateNote } from \"../client\";\nimport { DAY_TODO_FOLDER_ID } from \"../constants\";\nimport { parseDayTodoBody, serializeDayTodoBody } from \"./dayTodoDataHelper\";\n\n/**\n * 특정 날의 Todo (Day Todo) 를 저장한다.\n * @param dayTodo\n */\nexport const saveDayTodo = async (dayTodo: DayTodo) => {\n  const body = serializeDayTodoBody(dayTodo);\n\n  await updateNote(dayTodo.id, {\n    title: dayTodo.title,\n    body,\n  });\n};\n\nexport const createDayTodo = async (\n  dayTodo: Omit<DayTodo, \"id\">\n): Promise<{ id: NoteId; title: string }> => {\n  const body = serializeDayTodoBody(dayTodo);\n\n  const addedNote = await createNote({\n    title: dayTodo.title,\n    body: body,\n    parent_id: DAY_TODO_FOLDER_ID,\n    is_todo: 1,\n  });\n\n  return addedNote;\n};\n\nexport const findDayTodoId = async (\n  dayTodoTitle: string\n): Promise<NoteId | undefined> => {\n  return (\n    await findNote(\n      (note) =>\n        note.title === dayTodoTitle && note.parent_id === DAY_TODO_FOLDER_ID,\n      {\n        order_by: \"title\",\n        order_dir: \"ASC\",\n      }\n    )\n  )?.id;\n};\n\n/**\n * 특정 날의 Todo (Day Todo) 얻어오기\n * @param id\n */\nexport const getDayTodo = async (id: NoteId): Promise<DayTodo> => {\n  const { title, todo_completed, body } = await getNote(id);\n\n  const { dailyTodos, todos, totalPoint } = parseDayTodoBody(body);\n\n  return {\n    id,\n    title,\n    completed: todo_completed > 0,\n    dailyTodos,\n    todos,\n    totalPoint,\n  };\n};\n","import { DateTime } from \"luxon\";\nimport { getNotes } from \"./todoStorage/client\";\nimport { ONE_TIME_TODO_FOLDER_ID } from \"./todoStorage/constants\";\nimport { getAllDailyTodos } from \"./todoStorage/DailyTodo/dailyTodoDataService\";\nimport {\n  createDayTodo,\n  findDayTodoId,\n  getDayTodo as getDayTodoDataService,\n  saveDayTodo,\n} from \"./todoStorage/DayTodo/dayTodoDataService\";\nimport { DayTodo, isDailySingleTaskTodo, NoteId, TodoDay } from \"./type\";\n\ntype DayTitle = string;\n\nconst toDayTitle = (dateTime: DateTime): DayTitle => dateTime.toISODate();\n\nconst countOfDayPoint = (dayTodo: DayTodo): number => {\n  const todoPoint = dayTodo.todos.filter((todo) => todo.completed).length;\n\n  const dailyTodoPoint = dayTodo.dailyTodos.reduce(\n    (previousPoint, dailyTodoInDayTodo) => {\n      if (dailyTodoInDayTodo.tasks.length > 0) {\n        return (\n          previousPoint +\n          dailyTodoInDayTodo.tasks.filter((task) => task.completed).length\n        );\n      } else {\n        return dailyTodoInDayTodo.completed ? previousPoint + 1 : previousPoint;\n      }\n    },\n    0\n  );\n\n  return todoPoint + dailyTodoPoint;\n};\n\nconst updateDayTodo = async (dayTodo: DayTodo) => {\n  const newPoint = countOfDayPoint(dayTodo);\n  dayTodo.totalPoint = newPoint;\n\n  await saveDayTodo(dayTodo);\n};\n\nconst makeDayTodoObj = async (title: TodoDay) => {\n  const todos = await getNotes({\n    parent_id: ONE_TIME_TODO_FOLDER_ID,\n    is_todo: true,\n    is_completed: false,\n  });\n\n  const dailyTodos = await getAllDailyTodos();\n\n  const dayTodo: DayTodo = {\n    title: title,\n    completed: false,\n    todos: todos.map((todo) => ({\n      id: todo.id,\n      completed: todo.todo_completed > 0,\n      etc: \"\",\n      title: todo.title,\n      tasks: [],\n    })),\n    dailyTodos: dailyTodos.map((todo) => ({\n      id: todo.id,\n      completed: false,\n      etc: \"\",\n      title: todo.title,\n      tasks: isDailySingleTaskTodo(todo) ? [] : todo.template,\n    })),\n    id: \"\",\n  };\n\n  return dayTodo;\n};\n\nexport const getDayTodo: (todoDay: TodoDay) => Promise<DayTodo> = async (\n  todoDay\n) => {\n  let dayTodoId = await findDayTodoId(todoDay);\n\n  if (!dayTodoId) {\n    const dayTodo = await makeDayTodoObj(todoDay);\n\n    const { id } = await createDayTodo(dayTodo);\n    dayTodoId = id;\n  }\n\n  return await getDayTodoDataService(dayTodoId);\n};\n\nexport const getSupportDays = (): string[] => {\n  const maxDays = 5;\n  const migratedDay = DateTime.local(2021, 3, 4);\n  const days: string[] = [];\n\n  let itemDay = DateTime.local();\n\n  while (itemDay.diff(migratedDay, \"days\").days > 0 && days.length < maxDays) {\n    days.push(toDayTitle(itemDay));\n\n    itemDay = itemDay.minus({\n      days: 1,\n    });\n  }\n\n  return days;\n};\n\nexport const setCompleteOfOneTimeTodo = async (\n  todoDay: TodoDay,\n  id: NoteId,\n  completed: boolean\n) => {\n  const dayTodo = await getDayTodo(todoDay);\n\n  const todo = dayTodo.todos?.find((todo) => todo.id === id);\n  if (todo) {\n    todo.completed = completed;\n\n    await updateDayTodo(dayTodo);\n  }\n};\n\nexport const setDailyTodoTaskCompleted = async (\n  todoDay: TodoDay,\n  dailyTodoId: NoteId,\n  completed: boolean\n) => {\n  const dayTodo = await getDayTodo(todoDay);\n\n  const thisDailyTodo = dayTodo.dailyTodos.find(\n    (dailyTodo) => dailyTodo.id === dailyTodoId\n  );\n\n  if (!thisDailyTodo) {\n    throw new Error(\n      `no dailyTodo (${dailyTodoId}) in of DayTodo (${dayTodo.id}). may have to update dayTodo?`\n    );\n  }\n\n  thisDailyTodo.completed = completed;\n\n  await updateDayTodo(dayTodo);\n};\n\nexport const setDailyTodoSubTaskCompleted = async (\n  todoDay: TodoDay,\n  dailyTodoId: NoteId,\n  title: string,\n  completed: boolean\n) => {\n  const dayTodo = await getDayTodo(todoDay);\n\n  const thisDailyTodo = dayTodo.dailyTodos.find(\n    (dailyTodo) => dailyTodo.id === dailyTodoId\n  );\n\n  if (!thisDailyTodo) {\n    return;\n  }\n\n  const task = thisDailyTodo.tasks.find((task) => task.title === title);\n  if (!task) {\n    throw new Error(\n      `no task in dayTask (daily: ${dailyTodoId}, dayTodo: ${dayTodo.id}). may have to update daily todo?`\n    );\n  }\n\n  if (completed) {\n    task.completed = true;\n    thisDailyTodo.completed = true;\n\n    await updateDayTodo(dayTodo);\n  } else {\n    task.completed = false;\n    thisDailyTodo.completed = !!thisDailyTodo.tasks.find(\n      (task) => task.completed\n    );\n\n    await updateDayTodo(dayTodo);\n  }\n};\n","export type NoteId = string;\n\n/**\n * 각 날의 할일\n *\n * (todo 와 daily 있는 거)\n */\nexport type DayTodo = NoteLink & {\n  completed: boolean;\n  dailyTodos: Todo[];\n  todos: Todo[];\n  /**\n   * day todo 에 기입된 이날 점수.\n   * (계산한 것과 어긋나서 차이나는 경우가 생길까봐 명확히 정의해 둠)\n   */\n  totalPoint?: number;\n};\n\nexport type Task = {\n  completed: boolean;\n  title: string;\n};\n\nexport type DailySingleTask = NoteLink & {\n  completed: boolean;\n};\n\n/**\n * task 가 하나인 타입의 daily todo\n */\nexport type DailySingleTaskTodo = NoteLink & {\n  completed: boolean;\n  tasks: DailySingleTask[];\n};\n\n/**\n * daily multiple task todo 에 포함된 개별 day todo 에 대응하는 task 묶음\n *\n * todo: id 가 없을 수 있어서 좀 고민\n */\nexport type DayTask = {\n  id: NoteId;\n  title: string;\n  tasks: Task[];\n};\n\n/**\n * task 가 복수개인 타입의 daily todo\n */\nexport type DailyMultipleTaskTodo = NoteLink & {\n  completed: boolean;\n  dayTasks: DayTask[];\n  template: Task[];\n};\n\nexport type DailyTodo = DailyMultipleTaskTodo | DailySingleTaskTodo;\n\n/**\n * dailyTodo 가 DailySingleTaskTodo 인지\n * @param dailyTodo\n */\nexport function isDailySingleTaskTodo(\n  dailyTodo: DailyTodo\n): dailyTodo is DailySingleTaskTodo {\n  return \"tasks\" in dailyTodo;\n}\n\n/**\n * 다른 노트로의 링크. 이건 url 과 title 에는 사용하지 않는다.\n */\nexport type NoteLink = {\n  id: NoteId;\n  title: string;\n};\n\nexport type Todo = NoteLink & {\n  completed: boolean;\n  etc: string;\n  tasks: Task[];\n};\n\n/**\n * 각 날짜별 할일 점수\n */\nexport type DayPoint = NoteLink & {\n  point?: number;\n};\n\n/**\n * DayTodo 의 타이틀이 되는 ISO 형태의 날짜\n */\nexport type TodoDay = string;\n","interface Props {\n  loading: boolean;\n  children: any;\n}\n\nexport const Loading: React.FC<Props> = ({ children, loading }) => {\n  return loading ? <>ⓛ</> : children;\n};\n","import { ChangeEvent } from \"react\";\nimport { useMutation, useQueryClient } from \"react-query\";\nimport { Loading } from \"../../components/Loading\";\nimport {\n  setDailyTodoSubTaskCompleted,\n  setDailyTodoTaskCompleted,\n} from \"../../services/todo\";\nimport { Task, Todo } from \"../../services/type\";\n\nconst Checkbox = ({\n  checked,\n  disabled,\n  onChange,\n}: {\n  checked: boolean;\n  disabled: boolean;\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void;\n}) => (\n  <input\n    type=\"checkbox\"\n    checked={checked}\n    disabled={disabled}\n    onChange={onChange}\n  />\n);\n\nconst SubTask = ({\n  task,\n  onChangeCompleted,\n}: {\n  task: Task;\n  onChangeCompleted: (completed: boolean) => void;\n}) => {\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) =>\n    onChangeCompleted(e.target.checked);\n  return (\n    <li style={{ listStyleType: \"none\", fontSize: \"0.8em\" }}>\n      <input type=\"checkbox\" checked={task.completed} onChange={handleChange} />\n      {task.title}\n    </li>\n  );\n};\n\nexport const DailyTodoDetailPage = ({\n  todoDay,\n  todo,\n}: {\n  todoDay: string;\n  todo: Todo;\n}) => {\n  const queryClient = useQueryClient();\n\n  const { mutate } = useMutation(\n    async ({ title, completed }: { title: string; completed: boolean }) =>\n      setDailyTodoSubTaskCompleted(todoDay, todo.id, title, completed),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries(\"dayTodo\");\n      },\n    }\n  );\n\n  const mutationForAllComplete = useMutation(\n    async ({ completed }: { completed: boolean }) =>\n      setDailyTodoTaskCompleted(todoDay, todo.id, completed),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries(\"dayTodo\");\n      },\n    }\n  );\n\n  // if (!dailyTodoTask) {\n  //   return <></>;\n  // }\n\n  const handleChangeSubtaskCompleted = (title: string, completed: boolean) => {\n    mutate({\n      title,\n      completed,\n    });\n  };\n\n  const useAllComplete = todo.tasks.length === 0;\n  const handleChangeAllComplete = (e: ChangeEvent<HTMLInputElement>) => {\n    mutationForAllComplete.mutate({\n      completed: e.target.checked,\n    });\n  };\n\n  const isLoadingAllComplete = false;\n  //   mutationForAllComplete.isLoading || dailyTodoTaskQuery.isLoading;\n\n  return (\n    <div style={{ margin: \"5px\" }}>\n      <div>\n        <Loading loading={isLoadingAllComplete}>\n          <Checkbox\n            checked={todo.completed}\n            disabled={!useAllComplete}\n            onChange={handleChangeAllComplete}\n          />\n        </Loading>\n        {todo.title}\n      </div>\n\n      <ul style={{ paddingLeft: \"10px\", margin: \"0\" }}>\n        {todo.tasks.map((subTask) => {\n          return (\n            <SubTask\n              key={subTask.title}\n              task={subTask}\n              onChangeCompleted={(completed) =>\n                handleChangeSubtaskCompleted(subTask.title, completed)\n              }\n            />\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","import { Todo } from \"../../services/type\";\nimport { DailyTodoDetailPage } from \"../DailyTodoDetail/DailyTodoDetailPage\";\n\ntype Params = {\n  todoDay: string;\n  todo: Todo;\n};\nexport const DailyTodo = ({ todoDay, todo }: Params) => {\n  return <DailyTodoDetailPage todo={todo} todoDay={todoDay} />;\n};\n","import { ChangeEvent } from \"react\";\nimport { useMutation, useQueryClient } from \"react-query\";\nimport { Loading } from \"../../components/Loading\";\nimport { setCompleteOfOneTimeTodo } from \"../../services/todo\";\nimport { Todo } from \"../../services/type\";\n\nexport const OneTimeTodo = ({\n  todoDay,\n  todo: { id, title, completed },\n}: {\n  todoDay: string;\n  todo: Todo;\n}) => {\n  const queryClient = useQueryClient();\n  const mutation = useMutation(\n    async ({ id, completed }: { id: string; completed: boolean }) =>\n      setCompleteOfOneTimeTodo(todoDay, id, completed),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries(\"dayTodo\");\n      },\n    }\n  );\n\n  const handleChange = async (e: ChangeEvent<HTMLInputElement>) => {\n    mutation.mutate({\n      id,\n      completed: e.target.checked,\n    });\n  };\n\n  return (\n    <div>\n      <Loading loading={mutation.isLoading}>\n        <input type=\"checkbox\" checked={completed} onChange={handleChange} />\n      </Loading>\n      {title}\n    </div>\n  );\n};\n","import { useQuery } from \"react-query\";\nimport { getDayTodo } from \"../../services/todo\";\nimport { DailyTodo } from \"../DailyTodo\";\nimport { OneTimeTodo } from \"../OneTimeTodo\";\n\ninterface Props {\n  todoDay: string;\n}\n\nconst DayTodoComponent: React.FC<Props> = ({ todoDay }) => {\n  const { data: dayTodo } = useQuery([\"dayTodo\", todoDay], async () => {\n    return getDayTodo(todoDay);\n  });\n\n  const handleRefreshDayTodo = () => {};\n  return (\n    <article>\n      <section>\n        {dayTodo?.totalPoint} point{\" \"}\n        <button onClick={handleRefreshDayTodo}>refresh</button>\n      </section>\n      <div>\n        <h2>Todo</h2>\n        {dayTodo?.todos.map((todo) => {\n          return (\n            <OneTimeTodo key={todo.id} todo={todo} todoDay={dayTodo.title} />\n          );\n        })}\n      </div>\n      <div>\n        <h2>DailyTodo</h2>\n        {dayTodo?.dailyTodos.map((todo) => {\n          return (\n            <DailyTodo key={todo.id} todo={todo} todoDay={dayTodo.title} />\n          );\n        })}\n      </div>\n    </article>\n  );\n};\n\nexport { DayTodoComponent as DayTodo };\n","import { useEffect, useRef } from \"react\";\nimport { useQuery, useQueryClient } from \"react-query\";\nimport {\n  loadHost,\n  loadToken,\n  saveHost,\n  saveToken,\n} from \"../../services/localStorage/tokenService\";\n\ninterface Props {}\n\nexport const TokenInput: React.FC<Props> = () => {\n  const { data } = useQuery(\"joplinConnection\", async () => {\n    return {\n      host: await loadHost(),\n      token: await loadToken(),\n    };\n  });\n\n  const hostRef = useRef<HTMLInputElement>(null);\n  const tokenRef = useRef<HTMLInputElement>(null);\n  const queryClient = useQueryClient();\n  useEffect(() => {\n    if (tokenRef.current && data && data.token) {\n      tokenRef.current.value = data.token;\n    }\n\n    if (hostRef.current && data && data.host) {\n      hostRef.current.value = data.host;\n    }\n  }, [tokenRef, hostRef, data]);\n\n  const handleClick = async () => {\n    if (!tokenRef.current?.value || !hostRef.current?.value) {\n      alert(\"value required!\");\n      return;\n    }\n\n    await saveToken(tokenRef.current.value);\n    await saveHost(hostRef.current.value);\n\n    await queryClient.invalidateQueries();\n  };\n\n  return (\n    <div>\n      <h1>TokenInput</h1>\n      <p>\n        host: <input type=\"text\" ref={hostRef} />\n      </p>\n      <p>\n        token: <input type=\"text\" ref={tokenRef} />\n      </p>\n      <button onClick={handleClick}>SAVE</button>\n    </div>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { checkConnection } from \"../../services/localStorage/tokenService\";\nimport { getSupportDays } from \"../../services/todo\";\nimport { TodoDay } from \"../../services/type\";\nimport { DayTodo } from \"../DayTodo\";\nimport { TokenInput } from \"../TokenInput\";\n\nexport function TodoList() {\n  const { data: connection } = useQuery(\"checkConnection\", checkConnection);\n  const supportDays = useQuery(\"todoDays\", getSupportDays);\n  const [todoDay, setTodoDay] = useState<TodoDay>(DateTime.local().toISODate());\n\n  const showTokenInput = !connection;\n\n  return (\n    <>\n      {showTokenInput && <TokenInput />}\n      {!showTokenInput && (\n        <>\n          <section>\n            {supportDays.data?.map((todoDay) => {\n              return (\n                <button key={todoDay} onClick={() => setTodoDay(todoDay)}>\n                  {todoDay}\n                </button>\n              );\n            })}\n            <h1>{todoDay}</h1>\n          </section>\n          <DayTodo todoDay={todoDay} />\n        </>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport \"./App.css\";\nimport { TodoList } from \"./containers/TodoList/TodoList\";\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <>\n      <QueryClientProvider client={queryClient}>\n        <div className=\"App\">\n          <TodoList />\n        </div>\n        <ReactQueryDevtools initialIsOpen={false} />\n      </QueryClientProvider>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}