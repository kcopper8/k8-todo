{"version":3,"sources":["components/modules/SupportDays/index.tsx","services/localStorage/tokenService.ts","utils/tableize.ts","services/todoStorage/client.ts","services/todoStorage/constants.ts","services/todoStorage/markupHelper.ts","services/todoStorage/DailyTodo/dailyTodoDataHelper.ts","services/todoStorage/DailyTodo/dailyTodoDataService.ts","services/todoStorage/DayTodo/dayTodoDataHelper.ts","services/todoStorage/DayTodo/dayTodoDataService.ts","services/todoStorage/OneTimeTodo/oneTimeTodoDataService.ts","services/todo.ts","services/type.ts","components/modules/DayTodoLayout/index.tsx","components/atoms/Checkbox/index.tsx","components/atoms/Loading/index.tsx","components/modules/DailyTodo/index.tsx","containers/DailyTodo/index.tsx","components/modules/OneTimeTodo/index.tsx","containers/OneTimeTodo/index.tsx","containers/DayTodo/index.tsx","containers/TokenInput/index.tsx","containers/TodoList/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SupportDaysComponent","supportDays","onClickSupportDay","currentDay","map","todoDay","onClick","checkConnection","a","loadHost","loadToken","globalThis","localStorage","token","saveToken","host","saveHost","compares","b","comparator","undefined","tableize","sortedA","filter","v","sort","sortedB","arr","ai","bi","compareResult","push","JoplinInvalidConnectionError","type","message","e","Error","loadJoplinToken","loadJoplinHost","createNote","title","body","parent_id","is_todo","data","axios","post","ret","console","log","updateNote","id","put","getNote","noteId","fields","params","get","combineFilter","f1","f2","item","generateFilter","criteria","allFilter","_","is_completed","todo_completed","getNotes","page","items","limit","result","concat","has_more","findNote","sorting","rowNote","find","DAY_TODO_FOLDER_ID","REGEX_MARKDOWN_LINK","makeNoteLink","makeTodo","completed","extractJoplinNoteIdFromLink","joplinLinkText","matched","exec","contentIsTemplate","includes","parseTaskLine","line","parseLink","linkMarkdownText","markdownLink","link","parseMarkdownLink","parseDailyTodoBody","parseDailyMultipleTasksDayTask","tasks","parseDailySingleTasks","split","trim","task","dayTodoLink","fragments","str","rawTemplateBody","template","startsWith","isTitleLine","dayTasks","splitedBody","rawDayTaskBody","rawTitle","lines","parseDailyMultipleTaskDayTaskNoteLink","getAllDailyTodos","rawDailyTodos","serializeDayTodoFragment","todos","length","join","makeContentFromTitleAndBody","todo","serializeDayTodoBody","dailyTodos","totalPoint","serializeDayTodoFooter","extractTotalPointFromMetaFragment","metaFragment","execResult","Number","parseDayTodoBody","dayTodoBody","todoFragment","replace","todoLine","taskTitle","etc","parseDayTodoTodoFragment","frag","dailyTodoFragment","previousTodo","dailyTodoLines","forEach","parseDayTodoDailTodoFragment","saveDayTodo","dayTodo","createDayTodo","addedNote","findDayTodoId","dayTodoTitle","note","order_by","order_dir","getDayTodo","getOneTimeTodos","countOfDayPoint","reduce","previousPoint","dailyTodoInDayTodo","updateDayTodo","newPoint","makeDayTodoObj","dailyTodo","dayTodoId","getDayTodoDataService","refreshDayTodo","oneTimeTodos","todoTable","newTodos","oneTime","day","getSupportDays","migratedDay","DateTime","local","days","itemDay","diff","toISODate","minus","setCompleteOfOneTimeTodo","setDailyTodoTaskCompleted","dailyTodoId","thisDailyTodo","setDailyTodoSubTaskCompleted","DayTodoLayoutComponent","onClickRefresh","Checkbox","checked","disabled","onChange","Loading","children","loading","SubTask","onChangeCompleted","style","listStyleType","fontSize","target","DailyTodoComponent","isLoadingAllComplete","useAllComplete","handleChangeAllComplete","handleChangeSubtaskCompleted","margin","paddingLeft","subTask","DailyTodo","queryClient","useQueryClient","mutate","useMutation","onSuccess","invalidateQueries","mutationForAllComplete","OneTimeTodoComponent","isLoading","OneTimeTodo","mutation","handleChange","DayTodoComponent","useQuery","handleRefreshDayTodo","TokenInput","hostRef","useRef","tokenRef","useEffect","current","value","handleClick","alert","ref","TodoList","connection","useState","setTodoDay","showTokenInput","QueryClient","App","QueryClientProvider","client","className","initialIsOpen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79d47acd.chunk.js","sourcesContent":["import { TodoDay } from \"../../../services/type\";\n\ninterface Props {\n  supportDays: TodoDay[];\n  currentDay: TodoDay;\n  onClickSupportDay: (day: TodoDay) => void;\n}\n\nconst SupportDaysComponent: React.FC<Props> = ({\n  supportDays,\n  onClickSupportDay,\n  currentDay,\n}) => {\n  return (\n    <section>\n      {supportDays.map((todoDay) => {\n        return (\n          <button key={todoDay} onClick={() => onClickSupportDay(todoDay)}>\n            {todoDay}\n          </button>\n        );\n      })}\n      <h1>{currentDay}</h1>\n    </section>\n  );\n};\nexport { SupportDaysComponent };\n","export const checkConnection = async (): Promise<boolean> => {\n  return !!(await loadHost()) && !!(await loadToken());\n};\n\nexport const loadToken = async (): Promise<string | undefined> => {\n  return globalThis.localStorage.token;\n};\n\nexport const saveToken = async (token: string) => {\n  globalThis.localStorage.token = token;\n};\n\nexport const loadHost = async (): Promise<string | undefined> => {\n  return globalThis.localStorage.host;\n};\n\nexport const saveHost = async (host: string) => {\n  globalThis.localStorage.host = host;\n};\n","type Comparator<T> = (v1: T, v2: T) => number;\n\nconst compares = <T>(\n  a: T | undefined,\n  b: T | undefined,\n  comparator: Comparator<T>\n): number => {\n  if (a === undefined && b === undefined) {\n    return 0;\n  } else if (a === undefined) {\n    return 1;\n  } else if (b === undefined) {\n    return -1;\n  }\n  return comparator(a, b);\n};\n\nconst tableize = <T>(a: T[], b: T[], comparator: Comparator<T>) => {\n  const sortedA = a.filter((v) => v).sort(comparator);\n  const sortedB = b.filter((v) => v).sort(comparator);\n\n  const arr: [T | undefined, T | undefined][] = [];\n\n  let ai = 0;\n  let bi = 0;\n\n  while (sortedA[ai] || sortedB[bi]) {\n    const compareResult = compares(sortedA[ai], sortedB[bi], comparator);\n    if (compareResult === 0) {\n      // a === b\n      arr.push([sortedA[ai++], sortedB[bi++]]);\n    } else if (compareResult < 0) {\n      // a < b\n      arr.push([sortedA[ai++], undefined]);\n    } else {\n      // a > b\n      arr.push([undefined, sortedB[bi++]]);\n    }\n  }\n\n  return arr;\n};\n\nexport default tableize;\n","import axios from \"axios\";\nimport { loadHost, loadToken } from \"../localStorage/tokenService\";\n\ntype RawNote = {\n  id: string;\n  parent_id: string;\n  title: string;\n  body: string;\n  is_todo: number;\n  todo_completed: number;\n};\n\ntype RawNoteListItem = Omit<RawNote, \"body\">;\n\ntype JoplinItemListResult<T> = {\n  items: T[];\n  has_more: boolean;\n};\n\nexport class JoplinInvalidConnectionError extends Error {\n  static isThis(e: any): e is JoplinInvalidConnectionError {\n    return (\n      e instanceof JoplinInvalidConnectionError &&\n      e.type === \"joplinTokenInvalid\"\n    );\n  }\n  public readonly type = \"joplinTokenInvalid\";\n  constructor() {\n    super(\"joplin token invalid\");\n    this.message = \"joplin token invalid\";\n  }\n}\n\nconst loadJoplinToken = async () => {\n  const token = await loadToken();\n  if (!token) {\n    throw new JoplinInvalidConnectionError();\n  }\n  return token;\n};\n\nconst loadJoplinHost = async () => {\n  const host = await loadHost();\n  if (!host) {\n    throw new JoplinInvalidConnectionError();\n  }\n  return host;\n};\n\nexport async function createNote({\n  title,\n  body,\n  parent_id,\n  is_todo,\n}: Partial<RawNote>): Promise<RawNote> {\n  const data = { title, body, parent_id, is_todo };\n  const ret = await axios.post(\n    `${await loadJoplinHost()}/notes?token=${await loadJoplinToken()}`,\n    data\n  );\n  console.log(\"createNote result: \", ret.data);\n  return ret.data;\n}\n\nexport async function updateNote(\n  id: string,\n  { title, body }: Partial<RawNote>\n) {\n  const data = { body, title };\n  const ret = await axios.put(\n    `${await loadJoplinHost()}/notes/${id}?token=${await loadJoplinToken()}`,\n    data\n  );\n\n  console.log(\"updateNote result: \", ret.data);\n}\n\nexport async function getNote(noteId: string): Promise<RawNote> {\n  const ret = await axios.get(`${await loadJoplinHost()}/notes/${noteId}`, {\n    params: {\n      token: await loadJoplinToken(),\n      fields: \"id,parent_id,title,body,is_todo,todo_completed\",\n    },\n  });\n\n  return ret.data;\n}\n\ntype Criteria = Partial<{\n  parent_id: string;\n  is_todo: boolean;\n  is_completed: boolean;\n}>;\n\nconst combineFilter = <T>(\n  f1: (item: T) => boolean,\n  f2: (item: T) => boolean\n) => {\n  return (item: T) => f1(item) && f2(item);\n};\n\nconst generateFilter = (criteria: Criteria = {}) => {\n  const allFilter = (_: RawNoteListItem) => true;\n  let filter = allFilter;\n\n  if (\"parent_id\" in criteria) {\n    filter = combineFilter(\n      filter,\n      (item) => item.parent_id === criteria.parent_id\n    );\n  }\n\n  if (\"is_todo\" in criteria) {\n    if (criteria.is_todo) {\n      filter = combineFilter(filter, (item) => item.is_todo === 1);\n    } else {\n      filter = combineFilter(filter, (item) => item.is_todo !== 1);\n    }\n  }\n\n  if (\"is_completed\" in criteria) {\n    if (criteria.is_completed) {\n      filter = combineFilter(filter, (item) => item.todo_completed !== 0);\n    } else {\n      filter = combineFilter(filter, (item) => item.todo_completed === 0);\n    }\n  }\n\n  return filter;\n};\n\nexport async function getNotes(criteria: Criteria = {}): Promise<RawNote[]> {\n  let page = 0;\n\n  let items: RawNote[] = [];\n  let result: JoplinItemListResult<RawNote>;\n\n  const filter = generateFilter(criteria);\n\n  do {\n    result = (\n      await axios.get(`${await loadJoplinHost()}/notes`, {\n        params: {\n          token: await loadJoplinToken(),\n          fields: \"id,parent_id,title,is_todo,todo_completed,body\",\n          limit: 100,\n          page: page++,\n        },\n      })\n    ).data;\n\n    items = items.concat(result.items.filter(filter));\n  } while (result.has_more);\n\n  return items;\n}\n\nexport async function findNote(\n  filter: (note: RawNote) => boolean,\n  sorting: {\n    order_by?: keyof RawNote;\n    order_dir?: \"ASC\" | \"DESC\";\n  } = {}\n): Promise<RawNote | undefined> {\n  let page = 0;\n\n  let result: JoplinItemListResult<RawNote>;\n\n  do {\n    result = (\n      await axios.get(`${await loadJoplinHost()}/notes`, {\n        params: {\n          token: await loadJoplinToken(),\n          fields: \"id,parent_id,title,is_todo,todo_completed,body\",\n          limit: 100,\n          page: page++,\n          ...sorting,\n        },\n      })\n    ).data;\n\n    const rowNote = result.items.find(filter);\n    if (rowNote) {\n      return rowNote;\n    }\n  } while (result.has_more);\n}\n","/**\n * 특정 날의 할일 문서 폴더 ID\n */\nexport const DAY_TODO_FOLDER_ID = \"9d9446bc2a4c4c7d9e96bd6bbc5a5a4b\";\n\n/**\n * 각 날짜의 day todo 의 점수를 관리하는 노트 ID\n */\nexport const DAY_POINT_NOTE_ID = \"054c87fff0984d028390125538aa7089\";\n\n/**\n * 매일 할일 정의가 저장된 폴더 ID\n */\nexport const DAILY_TODO_STORE_FOLDER_ID = \"83981f6a4f6d4a0abcffc5363bf3cc8f\";\n\n/**\n * 진행중인 할일 (ex 프로젝트) 이 있는 폴더 ID\n */\nexport const ONE_TIME_TODO_FOLDER_ID = \"09626444fe23477e9704200cf69aff5e\";\n","import { NoteLink, Task } from \"../type\";\n\n/**\n * 마크다운 링크 정규식\n */\nexport const REGEX_MARKDOWN_LINK = /\\[([^\\]]+)\\]\\(([^)]+)\\)/;\n\n/**\n * joplin note link 마크다운 텍스트를 생성한다.\n * @param param0\n */\nexport const makeNoteLink = ({ title, id }: NoteLink): string => {\n  return `[${title}](:/${id})`;\n};\n\nexport const makeTodo = ({\n  title,\n  completed,\n}: {\n  title: string;\n  completed: boolean;\n}) => `- [${completed ? \"x\" : \" \"}] ${title}`;\n\nexport const makeContentFromTitleAndBody = ({\n  title,\n  body,\n}: {\n  title: string;\n  body: string;\n}): string => {\n  const result = [];\n  result.push(`## ${title}`);\n  result.push(body);\n  result.push(\"\");\n  return result.join(\"\\n\");\n};\n\n/**\n * \":/5f95a7805b8145feb85b0b2df1218b80\" => \"5f95a7805b8145feb85b0b2df1218b80\"\n * @param joplinLinkText\n */\nexport const extractJoplinNoteIdFromLink = (joplinLinkText: string) => {\n  const matched = /:\\/([\\d\\w]+)/.exec(joplinLinkText);\n  if (!matched) {\n    throw new Error(\"joplin link (:/xxxx..) required, but: \" + joplinLinkText);\n  }\n\n  return matched[1];\n};\n\n/**\n * 특정 문자열이 daily todo 의 raw 템플릿 인지 여부\n *\n * @param body\n */\nexport const contentIsTemplate = (body: string): boolean => {\n  return body.includes(\"#### 템플릿\");\n};\n\n/**\n * 특정 문서 body 가 multitask 인지 여부\n * @param todo\n */\nexport const checkTodoIsMultiTask = (todoBody: string): boolean => {\n  return contentIsTemplate(todoBody);\n};\n\n/**\n * parse task line\n *\n * from: `- [ ] 할일`\n * to: {completed: false, title: '할일' }\n *\n * @param line\n */\nexport const parseTaskLine = (line: string): Task => {\n  const result = /- \\[([x ])\\] (.+)/.exec(line);\n  if (!result) {\n    throw new Error(`\"${line}\" is not valid TaskLine`);\n  }\n\n  return {\n    completed: result[1] === \"x\",\n    title: result[2],\n  };\n};\n\n/**\n * ex)\n * from : [inbox 정리 2개](:/248aa9b7c29441c8a775561ad3a97a2d)\n * to: { title:'inbox 정리 2개, link: ':/248aa9b7c29441c8a775561ad3a97a2d' }\n * @param linkMarkdownText\n */\nexport const parseMarkdownLink = (\n  linkMarkdownText: string\n): { link: string; title: string } => {\n  const ret = REGEX_MARKDOWN_LINK.exec(linkMarkdownText);\n  if (!ret) {\n    throw new Error(`\"${linkMarkdownText}\" is not valid markdown link`);\n  }\n  return {\n    link: ret[2],\n    title: ret[1],\n  };\n};\n\n/**\n *\n * ex)\n * from : [inbox 정리 2개](:/248aa9b7c29441c8a775561ad3a97a2d)\n * to: { title:'inbox 정리 2개, link: '248aa9b7c29441c8a775561ad3a97a2d' }\n *\n * @param linkMarkdownText\n */\nexport const parseLink = (linkMarkdownText: string): NoteLink => {\n  const markdownLink = parseMarkdownLink(linkMarkdownText);\n  return {\n    id: extractJoplinNoteIdFromLink(markdownLink.link),\n    title: markdownLink.title,\n  };\n};\n\n/**\n * 특정 라인이 title 라인인지 여부\n *\n * @param line\n */\nexport const isTitleLine = (line: string) => line.startsWith(\"#### \");\n","import { DailySingleTask, DayTask, NoteLink, Task } from \"../../type\";\nimport {\n  checkTodoIsMultiTask,\n  contentIsTemplate,\n  isTitleLine,\n  parseLink,\n  parseTaskLine,\n} from \"../markupHelper\";\n\nexport const parseDailyTodoBody = (\n  body: string\n): { dayTasks: DayTask[]; template: Task[] } | { tasks: DailySingleTask[] } => {\n  const isMultiTask = checkTodoIsMultiTask(body);\n  if (isMultiTask) {\n    return {\n      ...parseDailyMultipleTasksDayTask(body),\n    };\n  } else {\n    return {\n      tasks: parseDailySingleTasks(body),\n    };\n  }\n};\n\nexport const parseDailySingleTasks = (body: string): DailySingleTask[] => {\n  const [taskBody] = body.split(\"---\");\n\n  return taskBody\n    .trim()\n    .split(\"\\n\")\n    .filter((body) => body)\n    .map((line) => {\n      const task = parseTaskLine(line);\n      const dayTodoLink = parseLink(task.title);\n\n      return {\n        id: dayTodoLink.id,\n        title: dayTodoLink.title,\n        completed: task.completed,\n      };\n    });\n};\n\nexport const parseDailyMultipleTasksDayTask = (\n  body: string\n): { dayTasks: DayTask[]; template: Task[] } => {\n  const fragments = body\n    .split(\"---\")\n    .map((str) => str.trim())\n    .filter((body) => body);\n\n  const rawTemplateBody = fragments.find(contentIsTemplate);\n\n  const template: Task[] =\n    rawTemplateBody\n      ?.trim()\n      .split(\"\\n\")\n      .filter((str) => str.trim())\n      .filter((line) => !isTitleLine(line))\n      .map(parseTaskLine) || [];\n\n  return {\n    dayTasks: fragments\n      .filter((splitedBody) => !contentIsTemplate(splitedBody))\n      .map((rawDayTaskBody) => {\n        const [rawTitle, ...lines] = rawDayTaskBody.trim().split(\"\\n\");\n\n        return {\n          ...parseDailyMultipleTaskDayTaskNoteLink(rawTitle),\n          tasks: lines\n            .filter((str) => str.trim())\n            .map((line) => parseTaskLine(line)),\n        };\n      }),\n    template,\n  };\n};\n\n/**\n * daily multiple task todo 의 개별 dayTask 에서 제목과 링크를 추출.\n *\n * #### 제목                    -> title : '제목', link : undefined\n * #### [제목](:/link)            -> title : '제목', link : 'link'\n * #### [제목](:/link)\\n- [ ] ... -> title : '제목', link : 'link'\n *\n * @param rawTitle\n */\nexport const parseDailyMultipleTaskDayTaskNoteLink = (\n  rawTitle: string\n): NoteLink => {\n  // https://regexr.com/5ks3n\n  const ret = /#### ([^\\n]+)/.exec(rawTitle);\n  if (ret) {\n    try {\n      return parseLink(ret[1]);\n    } catch (e) {\n      throw new Error(rawTitle + \" is not valid joplin link\");\n    }\n  } else {\n    throw new Error(rawTitle + \" is not raw title text\");\n  }\n};\n","import { DailyTodo } from \"../../type\";\nimport { getNotes } from \"../client\";\nimport { DAILY_TODO_STORE_FOLDER_ID } from \"../constants\";\nimport { parseDailyTodoBody } from \"./dailyTodoDataHelper\";\n\nexport const getAllDailyTodos = async (): Promise<DailyTodo[]> => {\n  const rawDailyTodos = await getNotes({\n    parent_id: DAILY_TODO_STORE_FOLDER_ID,\n    is_completed: false,\n    is_todo: true,\n  });\n\n  return rawDailyTodos.map(({ id, title, todo_completed, body }) => ({\n    id,\n    title,\n    completed: todo_completed > 0,\n    ...parseDailyTodoBody(body),\n  }));\n};\n","import { DayTodo, Todo } from \"../../type\";\nimport { DAY_POINT_NOTE_ID } from \"../constants\";\nimport {\n  makeContentFromTitleAndBody,\n  makeNoteLink,\n  makeTodo,\n  parseLink,\n  parseTaskLine,\n} from \"../markupHelper\";\n\nconst serializeDayTodoFragment = (\n  title: DayTodo[\"title\"],\n  todos: DayTodo[\"todos\"] | DayTodo[\"dailyTodos\"]\n): string => {\n  if (todos.length === 0) {\n    return \"\";\n  }\n\n  const body = todos\n    .map((todo) => {\n      const firstLine = makeTodo({\n        title: makeNoteLink(todo),\n        completed: todo.completed,\n      });\n\n      return [\n        firstLine,\n        ...todo.tasks.map((task) => {\n          return \"\\t\" + makeTodo(task);\n        }),\n      ].join(\"\\n\");\n    })\n    .join(\"\\n\");\n\n  return makeContentFromTitleAndBody({\n    title,\n    body: body,\n  }).trim();\n};\n\nconst serializeDayTodoFooter = (totalPoint?: number): string => {\n  const base = `- ${makeNoteLink({\n    title: \"할일 점수\",\n    id: DAY_POINT_NOTE_ID,\n  })} : `;\n\n  return base + (totalPoint ? totalPoint : \"\");\n};\n\nexport const serializeDayTodoBody = ({\n  todos,\n  dailyTodos,\n  totalPoint,\n}: Pick<DayTodo, \"todos\" | \"dailyTodos\" | \"totalPoint\">): string => {\n  const todoFragment = serializeDayTodoFragment(\"Todo\", todos);\n  const dailyTodoFragment = serializeDayTodoFragment(\"Daily\", dailyTodos);\n  const footer = serializeDayTodoFooter(totalPoint);\n\n  return (\n    [todoFragment, dailyTodoFragment + \"\\n\", footer]\n      .filter((item) => item.trim())\n      .join(\"\\n\\n---\\n\") + \"\\n\"\n  );\n};\n\nexport const parseDayTodoTodoFragment = (todoFragment?: string): Todo[] => {\n  if (!todoFragment) {\n    return [];\n  }\n  return todoFragment\n    .replace(\"## Todo\", \"\")\n    .trim()\n    .split(\"\\n\")\n    .map((todoLine) => {\n      const { completed, title: taskTitle } = parseTaskLine(todoLine.trim());\n      const { id, title } = parseLink(taskTitle);\n\n      return {\n        title,\n        completed,\n        id,\n        etc: \"\",\n        tasks: [],\n      };\n    });\n};\n\nexport const parseDayTodoDailTodoFragment = (\n  dailyTodoFragment?: string\n): Todo[] => {\n  if (!dailyTodoFragment) {\n    return [];\n  }\n\n  const dailyTodoLines = dailyTodoFragment\n    .replace(\"## Daily\", \"\")\n    .trim()\n    .split(\"\\n\");\n\n  const ret: Todo[] = [];\n  let previousTodo: Todo;\n\n  dailyTodoLines.forEach((line) => {\n    if (line.startsWith(\"\\t\")) {\n      // subtask\n      if (previousTodo) {\n        previousTodo.tasks.push(parseTaskLine(line.trim()));\n      }\n    } else {\n      const { completed, title: taskTitle } = parseTaskLine(line.trim());\n      const { id, title } = parseLink(taskTitle);\n\n      previousTodo = {\n        title,\n        completed,\n        id,\n        etc: \"\",\n        tasks: [],\n      };\n      ret.push(previousTodo);\n    }\n  });\n  return ret;\n};\n\nexport const extractTotalPointFromMetaFragment = (\n  metaFragment: string\n): number | undefined => {\n  // https://regexr.com/5l2bv\n  const execResult = /^- \\[.+\\]\\(.+\\) : (\\d+)$/.exec(metaFragment.trim());\n  if (execResult && execResult[1]) {\n    const ret = Number(execResult[1]);\n    if (ret) {\n      return ret;\n    }\n  }\n\n  return undefined;\n};\n\nexport const parseDayTodoBody = (\n  dayTodoBody: string\n): { todos: Todo[]; dailyTodos: Todo[]; totalPoint?: number } => {\n  const splitedBody = dayTodoBody.split(\"---\");\n  let todoFragment = splitedBody.find((frag) => frag.includes(\"## Todo\"));\n\n  let todos: Todo[] = parseDayTodoTodoFragment(todoFragment);\n\n  let dailyTodoFragment = splitedBody.find((frag) => frag.includes(\"## Daily\"));\n  let dailyTodos: Todo[] = parseDayTodoDailTodoFragment(dailyTodoFragment);\n\n  const metaFragment = splitedBody[splitedBody.length - 1];\n\n  return {\n    todos,\n    dailyTodos,\n    totalPoint: extractTotalPointFromMetaFragment(metaFragment),\n  };\n};\n","import { DayTodo, NoteId } from \"../../type\";\nimport { createNote, findNote, getNote, updateNote } from \"../client\";\nimport { DAY_TODO_FOLDER_ID } from \"../constants\";\nimport { parseDayTodoBody, serializeDayTodoBody } from \"./dayTodoDataHelper\";\n\n/**\n * 특정 날의 Todo (Day Todo) 를 저장한다.\n * @param dayTodo\n */\nexport const saveDayTodo = async (dayTodo: DayTodo) => {\n  const body = serializeDayTodoBody(dayTodo);\n\n  await updateNote(dayTodo.id, {\n    title: dayTodo.title,\n    body,\n  });\n};\n\nexport const createDayTodo = async (\n  dayTodo: Omit<DayTodo, \"id\">\n): Promise<{ id: NoteId; title: string }> => {\n  const body = serializeDayTodoBody(dayTodo);\n\n  const addedNote = await createNote({\n    title: dayTodo.title,\n    body: body,\n    parent_id: DAY_TODO_FOLDER_ID,\n    is_todo: 1,\n  });\n\n  return addedNote;\n};\n\nexport const findDayTodoId = async (\n  dayTodoTitle: string\n): Promise<NoteId | undefined> => {\n  return (\n    await findNote(\n      (note) =>\n        note.title === dayTodoTitle && note.parent_id === DAY_TODO_FOLDER_ID,\n      {\n        order_by: \"title\",\n        order_dir: \"ASC\",\n      }\n    )\n  )?.id;\n};\n\n/**\n * 특정 날의 Todo (Day Todo) 얻어오기\n * @param id\n */\nexport const getDayTodo = async (id: NoteId): Promise<DayTodo> => {\n  const { title, todo_completed, body } = await getNote(id);\n\n  const { dailyTodos, todos, totalPoint } = parseDayTodoBody(body);\n\n  return {\n    id,\n    title,\n    completed: todo_completed > 0,\n    dailyTodos,\n    todos,\n    totalPoint,\n  };\n};\n","import { getNotes } from \"../client\";\nimport { ONE_TIME_TODO_FOLDER_ID } from \"../constants\";\n\nexport const getOneTimeTodos = async () => {\n  const todos = await getNotes({\n    parent_id: ONE_TIME_TODO_FOLDER_ID,\n    is_todo: true,\n    is_completed: false,\n  });\n\n  return todos.map((todo) => ({\n    id: todo.id,\n    completed: todo.todo_completed > 0,\n    etc: \"\",\n    title: todo.title,\n    tasks: [],\n  }));\n};\n","import { DateTime } from \"luxon\";\nimport tableize from \"../utils/tableize\";\nimport { getAllDailyTodos } from \"./todoStorage/DailyTodo/dailyTodoDataService\";\nimport {\n  createDayTodo,\n  findDayTodoId,\n  getDayTodo as getDayTodoDataService,\n  saveDayTodo,\n} from \"./todoStorage/DayTodo/dayTodoDataService\";\nimport { getOneTimeTodos } from \"./todoStorage/OneTimeTodo/oneTimeTodoDataService\";\nimport { DayTodo, isDailySingleTaskTodo, NoteId, Todo, TodoDay } from \"./type\";\n\ntype DayTitle = string;\n\nconst toDayTitle = (dateTime: DateTime): DayTitle => dateTime.toISODate();\n\nconst countOfDayPoint = (dayTodo: DayTodo): number => {\n  const todoPoint = dayTodo.todos.filter((todo) => todo.completed).length;\n\n  const dailyTodoPoint = dayTodo.dailyTodos.reduce(\n    (previousPoint, dailyTodoInDayTodo) => {\n      if (dailyTodoInDayTodo.tasks.length > 0) {\n        return (\n          previousPoint +\n          dailyTodoInDayTodo.tasks.filter((task) => task.completed).length\n        );\n      } else {\n        return dailyTodoInDayTodo.completed ? previousPoint + 1 : previousPoint;\n      }\n    },\n    0\n  );\n\n  return todoPoint + dailyTodoPoint;\n};\n\nconst updateDayTodo = async (dayTodo: DayTodo) => {\n  const newPoint = countOfDayPoint(dayTodo);\n  dayTodo.totalPoint = newPoint;\n\n  await saveDayTodo(dayTodo);\n};\n\nconst makeDayTodoObj = async (title: TodoDay) => {\n  const dailyTodos = await getAllDailyTodos();\n\n  const dayTodo: DayTodo = {\n    title: title,\n    completed: false,\n    todos: await getOneTimeTodos(),\n    dailyTodos: dailyTodos.map((todo) => ({\n      id: todo.id,\n      completed: false,\n      etc: \"\",\n      title: todo.title,\n      tasks: isDailySingleTaskTodo(todo) ? [] : todo.template,\n    })),\n    id: \"\",\n  };\n\n  return dayTodo;\n};\n\nexport const getDayTodo: (todoDay: TodoDay) => Promise<DayTodo> = async (\n  todoDay\n) => {\n  let dayTodoId = await findDayTodoId(todoDay);\n\n  if (!dayTodoId) {\n    const dayTodo = await makeDayTodoObj(todoDay);\n\n    const { id } = await createDayTodo(dayTodo);\n    dayTodoId = id;\n  }\n\n  return await getDayTodoDataService(dayTodoId);\n};\n\nexport const refreshDayTodo = async (todoDay: TodoDay): Promise<void> => {\n  let dayTodoId = await findDayTodoId(todoDay);\n  if (!dayTodoId) {\n    throw new Error(\"no dayTodo for todoDay\");\n  }\n\n  const oneTimeTodos = await getOneTimeTodos();\n\n  const dayTodo = await getDayTodoDataService(dayTodoId);\n\n  const todoTable = tableize(oneTimeTodos, dayTodo.todos, (a, b) => {\n    return a.id === b.id ? 0 : a.id < b.id ? -1 : 1;\n  });\n\n  const newTodos = todoTable\n    .map(([oneTime, day]) => {\n      if (!oneTime && day) {\n        // completed at other place\n        return {\n          ...day,\n          completed: true,\n        };\n      } else if (oneTime && !day) {\n        // new\n        return {\n          ...oneTime,\n        };\n      } else if (oneTime && day) {\n        return {\n          ...day,\n        };\n      } else {\n        return undefined;\n      }\n    })\n    .filter((v) => v) as Todo[];\n\n  await updateDayTodo({\n    ...dayTodo,\n    todos: newTodos,\n  });\n};\n\nexport const getSupportDays = (): string[] => {\n  const maxDays = 5;\n  const migratedDay = DateTime.local(2021, 3, 4);\n  const days: string[] = [];\n\n  let itemDay = DateTime.local();\n\n  while (itemDay.diff(migratedDay, \"days\").days > 0 && days.length < maxDays) {\n    days.push(toDayTitle(itemDay));\n\n    itemDay = itemDay.minus({\n      days: 1,\n    });\n  }\n\n  return days;\n};\n\nexport const setCompleteOfOneTimeTodo = async (\n  todoDay: TodoDay,\n  id: NoteId,\n  completed: boolean\n) => {\n  const dayTodo = await getDayTodo(todoDay);\n\n  const todo = dayTodo.todos?.find((todo) => todo.id === id);\n  if (todo) {\n    todo.completed = completed;\n\n    await updateDayTodo(dayTodo);\n  }\n};\n\nexport const setDailyTodoTaskCompleted = async (\n  todoDay: TodoDay,\n  dailyTodoId: NoteId,\n  completed: boolean\n) => {\n  const dayTodo = await getDayTodo(todoDay);\n\n  const thisDailyTodo = dayTodo.dailyTodos.find(\n    (dailyTodo) => dailyTodo.id === dailyTodoId\n  );\n\n  if (!thisDailyTodo) {\n    throw new Error(\n      `no dailyTodo (${dailyTodoId}) in of DayTodo (${dayTodo.id}). may have to update dayTodo?`\n    );\n  }\n\n  thisDailyTodo.completed = completed;\n\n  await updateDayTodo(dayTodo);\n};\n\nexport const setDailyTodoSubTaskCompleted = async (\n  todoDay: TodoDay,\n  dailyTodoId: NoteId,\n  title: string,\n  completed: boolean\n) => {\n  const dayTodo = await getDayTodo(todoDay);\n\n  const thisDailyTodo = dayTodo.dailyTodos.find(\n    (dailyTodo) => dailyTodo.id === dailyTodoId\n  );\n\n  if (!thisDailyTodo) {\n    return;\n  }\n\n  const task = thisDailyTodo.tasks.find((task) => task.title === title);\n  if (!task) {\n    throw new Error(\n      `no task in dayTask (daily: ${dailyTodoId}, dayTodo: ${dayTodo.id}). may have to update daily todo?`\n    );\n  }\n\n  if (completed) {\n    task.completed = true;\n    thisDailyTodo.completed = true;\n\n    await updateDayTodo(dayTodo);\n  } else {\n    task.completed = false;\n    thisDailyTodo.completed = !!thisDailyTodo.tasks.find(\n      (task) => task.completed\n    );\n\n    await updateDayTodo(dayTodo);\n  }\n};\n","export type NoteId = string;\n\n/**\n * 각 날의 할일\n *\n * (todo 와 daily 있는 거)\n */\nexport type DayTodo = NoteLink & {\n  completed: boolean;\n  dailyTodos: Todo[];\n  todos: Todo[];\n  /**\n   * day todo 에 기입된 이날 점수.\n   * (계산한 것과 어긋나서 차이나는 경우가 생길까봐 명확히 정의해 둠)\n   */\n  totalPoint?: number;\n};\n\nexport type Task = {\n  completed: boolean;\n  title: string;\n};\n\nexport type DailySingleTask = NoteLink & {\n  completed: boolean;\n};\n\n/**\n * task 가 하나인 타입의 daily todo\n */\nexport type DailySingleTaskTodo = NoteLink & {\n  completed: boolean;\n  tasks: DailySingleTask[];\n};\n\n/**\n * daily multiple task todo 에 포함된 개별 day todo 에 대응하는 task 묶음\n *\n * todo: id 가 없을 수 있어서 좀 고민\n */\nexport type DayTask = {\n  id: NoteId;\n  title: string;\n  tasks: Task[];\n};\n\n/**\n * task 가 복수개인 타입의 daily todo\n */\nexport type DailyMultipleTaskTodo = NoteLink & {\n  completed: boolean;\n  dayTasks: DayTask[];\n  template: Task[];\n};\n\nexport type DailyTodo = DailyMultipleTaskTodo | DailySingleTaskTodo;\n\n/**\n * dailyTodo 가 DailySingleTaskTodo 인지\n * @param dailyTodo\n */\nexport function isDailySingleTaskTodo(\n  dailyTodo: DailyTodo\n): dailyTodo is DailySingleTaskTodo {\n  return \"tasks\" in dailyTodo;\n}\n\n/**\n * 다른 노트로의 링크. 이건 url 과 title 에는 사용하지 않는다.\n */\nexport type NoteLink = {\n  id: NoteId;\n  title: string;\n};\n\nexport type Todo = NoteLink & {\n  completed: boolean;\n  etc: string;\n  tasks: Task[];\n};\n\n/**\n * 각 날짜별 할일 점수\n */\nexport type DayPoint = NoteLink & {\n  point?: number;\n};\n\n/**\n * DayTodo 의 타이틀이 되는 ISO 형태의 날짜\n */\nexport type TodoDay = string;\n","interface Props {\n  totalPoint?: number;\n  onClickRefresh: () => void;\n  oneTimeTodos: any;\n  dailyTodos: any;\n}\n\nconst DayTodoLayoutComponent: React.FC<Props> = ({\n  totalPoint,\n  onClickRefresh,\n  oneTimeTodos,\n  dailyTodos,\n}) => {\n  return (\n    <article>\n      <section>\n        {totalPoint} point <button onClick={onClickRefresh}>refresh</button>\n      </section>\n      <div>\n        <h2>Todo</h2>\n        {oneTimeTodos}\n      </div>\n      <div>\n        <h2>DailyTodo</h2>\n        {dailyTodos}\n      </div>\n    </article>\n  );\n};\n\nexport { DayTodoLayoutComponent };\n","import { ChangeEvent } from \"react\";\n\ninterface Props {\n  checked: boolean;\n  disabled?: boolean;\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst Checkbox: React.FC<Props> = ({ checked, disabled = false, onChange }) => {\n  return (\n    <input\n      type=\"checkbox\"\n      checked={checked}\n      disabled={disabled}\n      onChange={onChange}\n    />\n  );\n};\n\nexport { Checkbox };\n","interface Props {\n  loading: boolean;\n  children: any;\n}\n\nexport const Loading: React.FC<Props> = ({ children, loading }) => {\n  return loading ? <>ⓛ</> : children;\n};\n","import { ChangeEvent } from \"react\";\nimport { Task, Todo } from \"../../../services/type\";\nimport { Checkbox } from \"../../atoms/Checkbox\";\nimport { Loading } from \"../../atoms/Loading\";\n\ninterface Props {\n  isLoadingAllComplete: boolean;\n  useAllComplete: boolean;\n  todo: Todo;\n\n  handleChangeAllComplete: (e: ChangeEvent<HTMLInputElement>) => void;\n  handleChangeSubtaskCompleted: (title: string, completed: boolean) => void;\n}\n\nconst SubTask = ({\n  task,\n  onChangeCompleted,\n}: {\n  task: Task;\n  onChangeCompleted: (completed: boolean) => void;\n}) => {\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) =>\n    onChangeCompleted(e.target.checked);\n  return (\n    <li style={{ listStyleType: \"none\", fontSize: \"0.8em\" }}>\n      <Checkbox checked={task.completed} onChange={handleChange} />\n      {task.title}\n    </li>\n  );\n};\n\nconst DailyTodoComponent: React.FC<Props> = ({\n  isLoadingAllComplete,\n  useAllComplete,\n  todo,\n  handleChangeAllComplete,\n  handleChangeSubtaskCompleted,\n}) => {\n  return (\n    <div style={{ margin: \"5px\" }}>\n      <div>\n        <Loading loading={isLoadingAllComplete}>\n          <Checkbox\n            checked={todo.completed}\n            disabled={!useAllComplete}\n            onChange={handleChangeAllComplete}\n          />\n        </Loading>\n        {todo.title}\n      </div>\n\n      <ul style={{ paddingLeft: \"10px\", margin: \"0\" }}>\n        {todo.tasks.map((subTask) => {\n          return (\n            <SubTask\n              key={subTask.title}\n              task={subTask}\n              onChangeCompleted={(completed) =>\n                handleChangeSubtaskCompleted(subTask.title, completed)\n              }\n            />\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport { DailyTodoComponent };\n","import { ChangeEvent } from \"react\";\nimport { useMutation, useQueryClient } from \"react-query\";\nimport { DailyTodoComponent } from \"../../components/modules/DailyTodo\";\nimport {\n  setDailyTodoSubTaskCompleted,\n  setDailyTodoTaskCompleted,\n} from \"../../services/todo\";\nimport { Todo } from \"../../services/type\";\n\ntype Params = {\n  todoDay: string;\n  todo: Todo;\n};\n\nexport const DailyTodo = ({ todoDay, todo }: Params) => {\n  const queryClient = useQueryClient();\n\n  const { mutate } = useMutation(\n    async ({ title, completed }: { title: string; completed: boolean }) =>\n      setDailyTodoSubTaskCompleted(todoDay, todo.id, title, completed),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries(\"dayTodo\");\n      },\n    }\n  );\n\n  const mutationForAllComplete = useMutation(\n    async ({ completed }: { completed: boolean }) =>\n      setDailyTodoTaskCompleted(todoDay, todo.id, completed),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries(\"dayTodo\");\n      },\n    }\n  );\n\n  const handleChangeSubtaskCompleted = (title: string, completed: boolean) => {\n    mutate({\n      title,\n      completed,\n    });\n  };\n\n  const useAllComplete = todo.tasks.length === 0;\n  const handleChangeAllComplete = (e: ChangeEvent<HTMLInputElement>) => {\n    mutationForAllComplete.mutate({\n      completed: e.target.checked,\n    });\n  };\n\n  const isLoadingAllComplete = false;\n\n  return (\n    <DailyTodoComponent\n      todo={todo}\n      isLoadingAllComplete={isLoadingAllComplete}\n      useAllComplete={useAllComplete}\n      handleChangeAllComplete={handleChangeAllComplete}\n      handleChangeSubtaskCompleted={handleChangeSubtaskCompleted}\n    />\n  );\n};\n","import { ChangeEvent } from \"react\";\nimport { Loading } from \"../../atoms/Loading\";\n\ninterface Props {\n  isLoading: boolean;\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void;\n  completed: boolean;\n  title: string;\n}\n\nconst OneTimeTodoComponent: React.FC<Props> = ({\n  isLoading,\n  onChange,\n  completed,\n  title,\n}) => {\n  return (\n    <div>\n      <Loading loading={isLoading}>\n        <input type=\"checkbox\" checked={completed} onChange={onChange} />\n      </Loading>\n      {title}\n    </div>\n  );\n};\n\nexport { OneTimeTodoComponent };\n","import { ChangeEvent } from \"react\";\nimport { useMutation, useQueryClient } from \"react-query\";\nimport { OneTimeTodoComponent } from \"../../components/modules/OneTimeTodo\";\nimport { setCompleteOfOneTimeTodo } from \"../../services/todo\";\nimport { Todo } from \"../../services/type\";\n\nexport const OneTimeTodo = ({\n  todoDay,\n  todo: { id, title, completed },\n}: {\n  todoDay: string;\n  todo: Todo;\n}) => {\n  const queryClient = useQueryClient();\n  const mutation = useMutation(\n    async ({ id, completed }: { id: string; completed: boolean }) =>\n      setCompleteOfOneTimeTodo(todoDay, id, completed),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries(\"dayTodo\");\n      },\n    }\n  );\n\n  const handleChange = async (e: ChangeEvent<HTMLInputElement>) => {\n    mutation.mutate({\n      id,\n      completed: e.target.checked,\n    });\n  };\n\n  return (\n    <OneTimeTodoComponent\n      isLoading={mutation.isLoading}\n      completed={completed}\n      onChange={handleChange}\n      title={title}\n    />\n  );\n};\n","import { useQuery, useQueryClient } from \"react-query\";\nimport { DayTodoLayoutComponent } from \"../../components/modules/DayTodoLayout\";\nimport { getDayTodo, refreshDayTodo } from \"../../services/todo\";\nimport { DailyTodo } from \"../DailyTodo\";\nimport { OneTimeTodo } from \"../OneTimeTodo\";\n\ninterface Props {\n  todoDay: string;\n}\n\nconst DayTodoComponent: React.FC<Props> = ({ todoDay }) => {\n  const { data: dayTodo } = useQuery([\"dayTodo\", todoDay], async () => {\n    return getDayTodo(todoDay);\n  });\n\n  const queryClient = useQueryClient();\n\n  const handleRefreshDayTodo = async () => {\n    await refreshDayTodo(todoDay);\n    queryClient.invalidateQueries([\"dayTodo\", todoDay]);\n  };\n  return (\n    <DayTodoLayoutComponent\n      totalPoint={dayTodo?.totalPoint}\n      onClickRefresh={handleRefreshDayTodo}\n      oneTimeTodos={dayTodo?.todos.map((todo) => {\n        return (\n          <OneTimeTodo key={todo.id} todo={todo} todoDay={dayTodo.title} />\n        );\n      })}\n      dailyTodos={dayTodo?.dailyTodos.map((todo) => {\n        return <DailyTodo key={todo.id} todo={todo} todoDay={dayTodo.title} />;\n      })}\n    />\n  );\n};\n\nexport { DayTodoComponent as DayTodo };\n","import { useEffect, useRef } from \"react\";\nimport { useQuery, useQueryClient } from \"react-query\";\nimport {\n  loadHost,\n  loadToken,\n  saveHost,\n  saveToken,\n} from \"../../services/localStorage/tokenService\";\n\ninterface Props {}\n\nexport const TokenInput: React.FC<Props> = () => {\n  const { data } = useQuery(\"joplinConnection\", async () => {\n    return {\n      host: await loadHost(),\n      token: await loadToken(),\n    };\n  });\n\n  const hostRef = useRef<HTMLInputElement>(null);\n  const tokenRef = useRef<HTMLInputElement>(null);\n  const queryClient = useQueryClient();\n  useEffect(() => {\n    if (tokenRef.current && data && data.token) {\n      tokenRef.current.value = data.token;\n    }\n\n    if (hostRef.current && data && data.host) {\n      hostRef.current.value = data.host;\n    }\n  }, [tokenRef, hostRef, data]);\n\n  const handleClick = async () => {\n    if (!tokenRef.current?.value || !hostRef.current?.value) {\n      alert(\"value required!\");\n      return;\n    }\n\n    await saveToken(tokenRef.current.value);\n    await saveHost(hostRef.current.value);\n\n    await queryClient.invalidateQueries();\n  };\n\n  return (\n    <div>\n      <h1>TokenInput</h1>\n      <p>\n        host: <input type=\"text\" ref={hostRef} />\n      </p>\n      <p>\n        token: <input type=\"text\" ref={tokenRef} />\n      </p>\n      <button onClick={handleClick}>SAVE</button>\n    </div>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { SupportDaysComponent } from \"../../components/modules/SupportDays\";\nimport { checkConnection } from \"../../services/localStorage/tokenService\";\nimport { getSupportDays } from \"../../services/todo\";\nimport { TodoDay } from \"../../services/type\";\nimport { DayTodo } from \"../DayTodo\";\nimport { TokenInput } from \"../TokenInput\";\n\nexport function TodoList() {\n  const { data: connection } = useQuery(\"checkConnection\", checkConnection);\n  const supportDays = useQuery(\"todoDays\", getSupportDays);\n  const [todoDay, setTodoDay] = useState<TodoDay>(DateTime.local().toISODate());\n\n  const showTokenInput = !connection;\n\n  return (\n    <>\n      {showTokenInput && <TokenInput />}\n      {!showTokenInput && supportDays.data && (\n        <>\n          <SupportDaysComponent\n            supportDays={supportDays.data}\n            onClickSupportDay={setTodoDay}\n            currentDay={todoDay}\n          />\n\n          <DayTodo todoDay={todoDay} />\n        </>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport \"./App.css\";\nimport { TodoList } from \"./containers/TodoList/TodoList\";\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <>\n      <QueryClientProvider client={queryClient}>\n        <div className=\"App\">\n          <TodoList />\n        </div>\n        <ReactQueryDevtools initialIsOpen={false} />\n      </QueryClientProvider>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}